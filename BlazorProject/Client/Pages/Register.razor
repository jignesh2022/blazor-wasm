@page "/register"
@inject Services.IUserService UserService
@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime

<div class="row justify-content-md-center mt-5">
    <div class="col-md-3 text-left"> 
        <h3 class="float-left">Register</h3>
        <br />        
    <EditForm Model="@RegisterModel" OnInvalidSubmit="InvalidSubmit"
              OnValidSubmit="ValidSubmit" @onreset="HandleReset">
        <DataAnnotationsValidator />
        <div class="form-group">
            <InputText class="form-control" placeholder="First Name" @bind-Value="RegisterModel.FirstName"></InputText>
            <ValidationMessage For="@(() => RegisterModel.FirstName)" />
        </div>
        <div class="form-group">
            <InputText class="form-control" placeholder="Last Name" @bind-Value="RegisterModel.LastName"></InputText>
            <ValidationMessage For="@(() => RegisterModel.LastName)" />
        </div>
        <div class="form-group">
            <InputText class="form-control" placeholder="Email"
                       @onblur="CheckIfAlreadyExists"
                       @bind-Value="RegisterModel.Email"></InputText>
            <ValidationMessage For="@(() => RegisterModel.Email)" />
        </div>
        <div class="form-group">
            <InputText class="form-control" type="password" placeholder="Password" @bind-Value="RegisterModel.Password"></InputText>
            <ValidationMessage For="@(() => RegisterModel.Password)" />
        </div>
        <div class="form-group">
            <InputText class="form-control" type="password" placeholder="Confirm Password" @bind-Value="RegisterModel.ConfirmPassword"></InputText>
            <ValidationMessage For="@(() => RegisterModel.ConfirmPassword)" />
        </div>
        <div class="form-group">
            <InputCheckbox id="acceptTerms"  @bind-Value="RegisterModel.Terms"> </InputCheckbox>
            <label for="acceptTerms">Accept Terms & Conditions</label>
            <ValidationMessage For="@(() => RegisterModel.Terms)" />
        </div>
        <div class="form-group">
            <button type="submit" class="btn btn-primary btn-sm float-left">Register</button>
            <button type="reset" class="btn btn-secondary btn-sm ml-1">Reset</button>
        </div>
    </EditForm> 
    </div>
</div> 
 
@code {

    //private EditContext editContext;

    private BlazorProject.Shared.Register RegisterModel = new BlazorProject.Shared.Register();
    private string display { get; set; } = "none";


    private async Task CheckIfAlreadyExists()
    {
        display = "block";
        bool exists = await UserService.EmailExists(RegisterModel.Email);
        display = "none";
        if (exists)
        {
            RegisterModel.Email = "";
            await JSRuntime.InvokeVoidAsync("showMessage", "info", "This email is already used.");
        }
    }

    private async Task ValidSubmit()
    {
        display = "block";
        string response = await UserService.Register(RegisterModel);
        display = "none";
        if (response != null)
        {    
            await JSRuntime.InvokeVoidAsync("showMessage", "success", "New User Created Successfully.");
        }
        else
        {         
            await JSRuntime.InvokeVoidAsync("showMessage", "danger", "Some error.");
        }
    }

    private void InvalidSubmit()
    {
        Console.WriteLine("Invalid FORM SUBMIT LOGIN");
    }
     
    private void HandleReset()
    {
        RegisterModel = new BlazorProject.Shared.Register();
    }
}
